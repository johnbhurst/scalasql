// $Id$
// John Hurst (jbhurst@attglobal.net)
// 2009-01-06

package nz.co.skepticalhumorist.sql

import oracle.jdbc.pool.OracleDataSource

object TestApp extends Application {
  val dataSource = new OracleDataSource
  dataSource.setURL("jdbc:oracle:thin:@localhost:1521:ORCL")
  dataSource.setUser("scalasql")
  dataSource.setPassword("scalasql")
  val db = new Db(dataSource)
  println("Result 1:")
  db.queryMeta("SELECT * FROM test WHERE name LIKE '%' || ? || '%'", "T") {meta =>
    println(meta.getColumnName(2))
  } {resultSet =>
    println(resultSet.getString("name"))
  }
  println("Result 2:")
  db.query("SELECT * FROM test WHERE name LIKE '%' || ? || '%'", "T") {resultSet =>
    println(resultSet.getString("name"))
  }

  println("Result 3:")
  val rows = db.rowsMeta("SELECT * FROM test WHERE name NOT LIKE '%' || ? || '%'", "T") {meta =>
    println(meta.getColumnName(1) + ", " + meta.getColumnName(2))
  }
  for (row <- rows) {
    println(row(0) + ", " + row(1))
  }

  println("Result 4:")
  val rows2 = db.rows("SELECT * FROM test WHERE id = 2")
  for (row <- rows2) {
    println(row(0) + ", " + row(1))
  }

  println("TestApp 5:")
  println(db.execute("UPDATE test SET name = 'one' WHERE id = ? ", int2Integer(1)))
  println(db.execute("UPDATE test SET name = 'one' WHERE id = ? ", int2Integer(-1)))
  println(db.execute("UPDATE test SET name = 'ONE' WHERE id = 1"))
  // JH_TODO: verify update

//  println("TestApp 6:")
//  val keys = db.executeInsert("INSERT INTO test VALUES (?, ?)", int2Integer(4), "FOUR")
//  println("Autogenerated keys length = " + keys.length)

  println("TestApp 7:")
  println(db.executeUpdate("UPDATE test SET name = LOWER(name) WHERE name LIKE '%' || ? || '%'", "T"))
  println(db.executeUpdate("UPDATE test SET name = LOWER(name) WHERE name LIKE '%' || ? || '%'", "T"))
  println(db.executeUpdate("UPDATE test SET name = UPPER(name) WHERE name LIKE '%' || ? || '%'", "t"))

  println("TestApp 8:")
  val firstRow = db.firstRow("SELECT * FROM test WHERE id < ? ORDER BY id", int2Integer(3)) match {
    case Some(row) => row
    case None => throw new RuntimeException("Result expected, none returned")
  }
  println(firstRow(0))
  println(firstRow(1))

  println("TestApp 9:")
  val firstRow2 = db.firstRowMeta("SELECT * FROM test WHERE id < ? ORDER BY id DESC", int2Integer(3)) {meta =>
    println(meta.getColumnName(1))
    println(meta.getColumnName(2))
  } match {
    case Some(row) => row
    case None => throw new RuntimeException("Result expected, none returned")
  }
  println(firstRow2(0))
  println(firstRow2(1))
}
