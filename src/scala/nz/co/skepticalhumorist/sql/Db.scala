// $Id$
// John Hurst (jbhurst@attglobal.net)
// 2009-01-06

package nz.co.skepticalhumorist.sql

import scala.collection.mutable.ListBuffer
import scala.runtime.RichBoolean
import java.sql._
import javax.sql._
import java.util.Properties

// This Scala class is based on the Groovy standard library groovy.sql.Sql class.
// Main constructor with both DataSource and Connection is private: use one or the other.
class Db private (
  val dataSource: DataSource,
  val connection: Connection
) {

  def this(dataSource: DataSource) = this(dataSource, null)
  def this(connection: Connection) = this(null, connection)

  def call(sql: String, params: AnyRef*) = {
    // JH_TODO
  }

  def callResultSet(sql: String, params: AnyRef*)(f: ResultSet => Unit) = {
    // JH_TODO
  }

  def close = {
    if (connection != null) {
      connection.close
    }
  }

  def commit = {
    if (connection != null) {
      connection.close
    }
  }

  def rollback() {
    if (connection != null) {
      connection.rollback
    }
  }

  def execute(sql: String, params: AnyRef*): Boolean = {
    prepareAndExecuteStatement(sql, params: _*) {_.execute}
  }

//  // JH_TODO: autogenerated keys.  But I don't think this is supported by Oracle.  Apache Derby or HSQLDB?
//  def executeInsert(sql: String, params: AnyRef*): List[Seq[AnyRef]] = {
//    List()
//  }

  def executeUpdate(sql: String, params: AnyRef*): Int = {
    prepareAndExecuteStatement(sql, params: _*) {_.executeUpdate()}
  }

  def firstRow(sql: String, params: AnyRef*) : Option[Seq[AnyRef]] = {
    firstRowMeta(sql, params: _*) {ResultSetMetaData => }
  }

  def firstRowMeta(sql: String, params: AnyRef*)(meta: ResultSetMetaData => Unit): Option[Seq[AnyRef]] = {
    prepareAndExecuteStatement(sql, params: _*) {
      executeFirstWithResultSet(_)(meta) {
        resultsToSeqRow(_)
      }
    }
  }

  def query(sql: String, params: AnyRef*)(f: ResultSet => Unit) {
    queryMeta(sql, params: _*) {ResultSetMetaData => } (f)
  }

  def queryMeta(sql: String, params: AnyRef*)(meta: ResultSetMetaData => Unit)(f: ResultSet => Unit) {
    prepareAndExecuteStatement(sql, params: _*) {
      executeWithResultSet(_)(meta) {
        f(_)
      }
    }
  }

  def queryForValue[T](sql: String, params: AnyRef*): Option[T] = {
    firstRow(sql, params: _*) match {
      case Some(row) => Some(row(0).asInstanceOf[T])
      case None => None
    }
  }

  def rows(sql: String, params: AnyRef*): List[Seq[AnyRef]] = {
    rowsMeta(sql, params: _*) {ResultSetMetaData => }
  }

  def rowsMeta(sql: String, params: AnyRef*)(meta: ResultSetMetaData => Unit): List[Seq[AnyRef]] = {
    val result = new ListBuffer[Seq[AnyRef]]
    prepareAndExecuteStatement(sql, params: _*) {
      executeWithResultSet(_)(meta) {
        result += resultsToSeqRow(_)
      }
    }
    result.toList
  }

  private def resultsToSeqRow(resultSet: ResultSet): Seq[AnyRef] = {
    // JH_TODO: I can't get the simpler "yield" version below to work.
    // It seems to be some kind of deferred evaluation problem, such that
    // the ResultSet is accessed after it is closed.
    // Maybe we need a way to force the yield to fully evaluate the elements.
    val columnCount = resultSet.getMetaData.getColumnCount
    val result = new scala.Array[AnyRef](columnCount)
    for (i <- 0 until columnCount) {
      result(i) = resultSet.getObject(i + 1)
    }
    result
//    for (i <- 0 until columnCount)
//      yield resultSet.getObject(i + 1)
  }

  private def executeWithConnection[T](f: Connection => T): T = {
    val connection =
      if (dataSource != null) dataSource.getConnection else this.connection
    try {
      f(connection)
    }
    finally {
      if (dataSource != null) {
        connection.close
      }
    }
  }

  private def executeWithStatement[T](f: Statement => T): T = {
    executeWithConnection {connection =>
      val statement = connection.createStatement
      try {
        f(statement)
      }
      finally {
        statement.close
      }
    }
  }

  private def executeWithResultSet(preparedStatement: PreparedStatement)(meta: ResultSetMetaData => Unit)(f: ResultSet => Unit) {
    val resultSet = preparedStatement.executeQuery
    executeAndCloseResultSet(resultSet)(meta)(f)
  }

  private def executeAndCloseResultSet(resultSet: ResultSet)(meta: ResultSetMetaData => Unit)(f: ResultSet => Unit) {
    var first = true
    try {
      while (resultSet.next) {
        if (first) {
          meta(resultSet.getMetaData)
          first = false
        }
        f(resultSet)
      }
    }
    finally {
      resultSet.close
    }
  }

  private def executeFirstWithResultSet[T](preparedStatement: PreparedStatement)(meta: ResultSetMetaData => Unit)(f: ResultSet => T): Option[T] = {
    val resultSet = preparedStatement.executeQuery
    executeFirstAndCloseResultSet(resultSet)(meta)(f)
  }

  private def executeFirstAndCloseResultSet[T](resultSet: ResultSet)(meta: ResultSetMetaData => Unit)(f: ResultSet => T): Option[T] = {
    try {
      if (resultSet.next) {
        meta(resultSet.getMetaData)
        Some(f(resultSet))
      }
      else {
        None
      }
    }
    finally {
      resultSet.close
    }
  }

  private def prepareAndExecuteStatement[T](sql: String, params: AnyRef*)(f: PreparedStatement => T): T = {
    executeWithConnection {connection =>
      val statement = connection.prepareStatement(sql)
      try {
        for (i <- 0 until params.length) {
          statement.setObject(i + 1, params(i))
        }
        f(statement)
      }
      finally {
        statement.close
      }
    }
  }
}

object Db {
  private def loadDriverClass(driverClassName: String) {
    Class.forName(driverClassName)
  }

  def apply(url: String): Db = {
    new Db(DriverManager.getConnection(url))
  }
  def apply(url: String, properties: Properties): Db = {
    new Db(DriverManager.getConnection(url, properties))
  }
  def apply(url: String, props: Properties, driverClassName: String): Db = {
    loadDriverClass(driverClassName)
    apply(url, props)
  }
  def apply(url: String, driverClassName: String): Db = {
    loadDriverClass(driverClassName)
    apply(url)
  }
  def apply(url: String, user: String, password: String): Db = {
    new Db(DriverManager.getConnection(url, user, password))
  }
  def apply(url: String, user: String, password: String, driverClassName: String): Db = {
    loadDriverClass(driverClassName)
    new Db(DriverManager.getConnection(url, user, password))
  }
}
